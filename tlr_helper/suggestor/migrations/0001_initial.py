# Generated by Django 5.2.1 on 2025-06-03 08:50

import django.db.models.deletion
import smart_selects.db_fields
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ClassLevel',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=5, unique=True)),
                ('name', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='CoreCompetency',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='GoalTag',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='KeyLearningArea',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='LearningStyle',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Material',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=40, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ResourceType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=60, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='SpecialNeed',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('description', models.TextField(blank=True)),
            ],
        ),
        migrations.CreateModel(
            name='Theme',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='ContentStandard',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('competencies', models.ManyToManyField(blank=True, to='suggestor.corecompetency')),
                ('goals', models.ManyToManyField(blank=True, to='suggestor.goaltag')),
            ],
        ),
        migrations.CreateModel(
            name='Indicator',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('code', models.CharField(max_length=20)),
                ('description', models.TextField()),
                ('competencies', models.ManyToManyField(blank=True, to='suggestor.corecompetency')),
                ('goals', models.ManyToManyField(blank=True, to='suggestor.goaltag')),
                ('standard', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='indicators', to='suggestor.contentstandard')),
            ],
            options={
                'unique_together': {('standard', 'code')},
            },
        ),
        migrations.CreateModel(
            name='Subject',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggestor.classlevel')),
            ],
        ),
        migrations.CreateModel(
            name='Strand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.PositiveSmallIntegerField(choices=[(1, 'Term 1'), (2, 'Term 2'), (3, 'Term 3')])),
                ('title', models.CharField(max_length=120)),
                ('slug', models.SlugField(blank=True)),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggestor.classlevel')),
                ('competencies', models.ManyToManyField(blank=True, to='suggestor.corecompetency')),
                ('key_learning_areas', models.ManyToManyField(blank=True, to='suggestor.keylearningarea')),
                ('subject', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='strands', to='suggestor.subject')),
                ('themes', models.ManyToManyField(blank=True, to='suggestor.theme')),
            ],
        ),
        migrations.CreateModel(
            name='SubStrand',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=120)),
                ('slug', models.SlugField(blank=True)),
                ('strand', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='substrands', to='suggestor.strand')),
            ],
        ),
        migrations.AddField(
            model_name='contentstandard',
            name='substrand',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='standards', to='suggestor.substrand'),
        ),
        migrations.CreateModel(
            name='Tlr',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('term', models.PositiveSmallIntegerField(blank=True, null=True)),
                ('title', models.CharField(max_length=120)),
                ('brief_description', models.TextField()),
                ('time_needed', models.CharField(choices=[('starter', 'Starter activity (5–10 mins)'), ('short', 'Short activity (10–20 mins)'), ('core', 'Main activity (20–40 mins)'), ('wrap', 'Wrap-up / Review (5–15 mins)'), ('homework', 'Homework / Take-home'), ('reusable', 'Reusable or ongoing resource')], default='lesson', max_length=10)),
                ('steps_to_make', models.TextField(blank=True)),
                ('tips_for_use', models.TextField(blank=True)),
                ('intended_use', models.CharField(blank=True, choices=[('intro', 'Introduction'), ('aid', 'Teaching Aid'), ('assessment', 'Assessment')], max_length=20, null=True)),
                ('tlr_type', models.CharField(blank=True, choices=[('manipulative', 'Manipulative'), ('flashcard', 'Flashcard'), ('poster', 'Poster'), ('audio', 'Audio'), ('video', 'Video'), ('game', 'Game')], max_length=20, null=True)),
                ('class_size', models.CharField(blank=True, choices=[('small', '≤ 25'), ('medium', '26 – 40'), ('large', '41+')], max_length=10, null=True)),
                ('bloom_level', models.CharField(blank=True, choices=[('remember', 'Remember (recall facts, terms)'), ('understand', 'Understand (explain ideas)'), ('apply', 'Apply (use info in new ways)'), ('analyze', 'Analyze (compare, contrast)'), ('evaluate', 'Evaluate (defend opinions, judge value)'), ('create', 'Create (develop or brain storm on idea)')], max_length=20, null=True)),
                ('budget_band', models.CharField(blank=True, choices=[('none', '₵0 (No cost – use recycled or available materials)'), ('low', '₵1 – ₵10'), ('medium', '₵11 – ₵30'), ('high', '₵31 – ₵100'), ('very_high', '₵101+')], max_length=20, null=True)),
                ('learning_outcome', models.TextField(blank=True)),
                ('search_keywords', models.TextField(blank=True)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('last_updated', models.DateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(default=False)),
                ('download_count', models.PositiveIntegerField(default=0)),
                ('class_level', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='suggestor.classlevel')),
                ('competencies', models.ManyToManyField(blank=True, to='suggestor.corecompetency')),
                ('created_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('goals', models.ManyToManyField(blank=True, to='suggestor.goaltag')),
                ('indicator', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='suggestor.indicator')),
                ('key_learning_areas', models.ManyToManyField(blank=True, to='suggestor.keylearningarea')),
                ('learning_styles', models.ManyToManyField(blank=True, to='suggestor.learningstyle')),
                ('materials', models.ManyToManyField(blank=True, to='suggestor.material')),
                ('resource_types', models.ManyToManyField(blank=True, to='suggestor.resourcetype')),
                ('special_needs', models.ManyToManyField(blank=True, to='suggestor.specialneed')),
                ('standard', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='suggestor.contentstandard')),
                ('strand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='suggestor.strand')),
                ('subject', smart_selects.db_fields.ChainedForeignKey(auto_choose=True, blank=True, chained_field='class_level', chained_model_field='class_level', null=True, on_delete=django.db.models.deletion.CASCADE, to='suggestor.subject')),
                ('substrand', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='suggestor.substrand')),
                ('themes', models.ManyToManyField(blank=True, to='suggestor.theme')),
            ],
        ),
        migrations.CreateModel(
            name='TlrImage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to='tlr_images/')),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('tlr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='images', to='suggestor.tlr')),
            ],
        ),
        migrations.CreateModel(
            name='TlrVideo',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('url', models.URLField()),
                ('caption', models.CharField(blank=True, max_length=200)),
                ('tlr', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='videos', to='suggestor.tlr')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='contentstandard',
            unique_together={('substrand', 'code')},
        ),
    ]
